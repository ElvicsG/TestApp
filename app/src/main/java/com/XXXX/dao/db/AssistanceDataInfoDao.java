package com.XXXX.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kehui.www.testapp.database.AssistanceDataInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSISTANCE_DATA_INFO".
*/
public class AssistanceDataInfoDao extends AbstractDao<AssistanceDataInfo, Long> {

    public static final String TABLENAME = "ASSISTANCE_DATA_INFO";

    /**
     * Properties of entity AssistanceDataInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InfoId = new Property(1, String.class, "InfoId", false, "INFO_ID");
        public final static Property TestTime = new Property(2, long.class, "testTime", false, "TEST_TIME");
        public final static Property TestName = new Property(3, String.class, "testName", false, "TEST_NAME");
        public final static Property TestPosition = new Property(4, String.class, "testPosition", false, "TEST_POSITION");
        public final static Property CableLength = new Property(5, String.class, "cableLength", false, "CABLE_LENGTH");
        public final static Property CableType = new Property(6, String.class, "cableType", false, "CABLE_TYPE");
        public final static Property FaultType = new Property(7, String.class, "faultType", false, "FAULT_TYPE");
        public final static Property FaultLength = new Property(8, String.class, "faultLength", false, "FAULT_LENGTH");
        public final static Property ShortNote = new Property(9, String.class, "shortNote", false, "SHORT_NOTE");
        public final static Property DataCollection = new Property(10, String.class, "dataCollection", false, "DATA_COLLECTION");
        public final static Property ReportStatus = new Property(11, String.class, "reportStatus", false, "REPORT_STATUS");
        public final static Property ReplyStatus = new Property(12, String.class, "replyStatus", false, "REPLY_STATUS");
        public final static Property ReplyContent = new Property(13, String.class, "replyContent", false, "REPLY_CONTENT");
        public final static Property MagneticFieldGain = new Property(14, int.class, "magneticFieldGain", false, "MAGNETIC_FIELD_GAIN");
        public final static Property VoiceGain = new Property(15, int.class, "VoiceGain", false, "VOICE_GAIN");
        public final static Property FilterMode = new Property(16, int.class, "filterMode", false, "FILTER_MODE");
        public final static Property Language = new Property(17, String.class, "language", false, "LANGUAGE");
    };


    public AssistanceDataInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AssistanceDataInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSISTANCE_DATA_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INFO_ID\" TEXT," + // 1: InfoId
                "\"TEST_TIME\" INTEGER NOT NULL ," + // 2: testTime
                "\"TEST_NAME\" TEXT," + // 3: testName
                "\"TEST_POSITION\" TEXT," + // 4: testPosition
                "\"CABLE_LENGTH\" TEXT," + // 5: cableLength
                "\"CABLE_TYPE\" TEXT," + // 6: cableType
                "\"FAULT_TYPE\" TEXT," + // 7: faultType
                "\"FAULT_LENGTH\" TEXT," + // 8: faultLength
                "\"SHORT_NOTE\" TEXT," + // 9: shortNote
                "\"DATA_COLLECTION\" TEXT," + // 10: dataCollection
                "\"REPORT_STATUS\" TEXT," + // 11: reportStatus
                "\"REPLY_STATUS\" TEXT," + // 12: replyStatus
                "\"REPLY_CONTENT\" TEXT," + // 13: replyContent
                "\"MAGNETIC_FIELD_GAIN\" INTEGER NOT NULL ," + // 14: magneticFieldGain
                "\"VOICE_GAIN\" INTEGER NOT NULL ," + // 15: VoiceGain
                "\"FILTER_MODE\" INTEGER NOT NULL ," + // 16: filterMode
                "\"LANGUAGE\" TEXT);"); // 17: language
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSISTANCE_DATA_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssistanceDataInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String InfoId = entity.getInfoId();
        if (InfoId != null) {
            stmt.bindString(2, InfoId);
        }
        stmt.bindLong(3, entity.getTestTime());
 
        String testName = entity.getTestName();
        if (testName != null) {
            stmt.bindString(4, testName);
        }
 
        String testPosition = entity.getTestPosition();
        if (testPosition != null) {
            stmt.bindString(5, testPosition);
        }
 
        String cableLength = entity.getCableLength();
        if (cableLength != null) {
            stmt.bindString(6, cableLength);
        }
 
        String cableType = entity.getCableType();
        if (cableType != null) {
            stmt.bindString(7, cableType);
        }
 
        String faultType = entity.getFaultType();
        if (faultType != null) {
            stmt.bindString(8, faultType);
        }
 
        String faultLength = entity.getFaultLength();
        if (faultLength != null) {
            stmt.bindString(9, faultLength);
        }
 
        String shortNote = entity.getShortNote();
        if (shortNote != null) {
            stmt.bindString(10, shortNote);
        }
 
        String dataCollection = entity.getDataCollection();
        if (dataCollection != null) {
            stmt.bindString(11, dataCollection);
        }
 
        String reportStatus = entity.getReportStatus();
        if (reportStatus != null) {
            stmt.bindString(12, reportStatus);
        }
 
        String replyStatus = entity.getReplyStatus();
        if (replyStatus != null) {
            stmt.bindString(13, replyStatus);
        }
 
        String replyContent = entity.getReplyContent();
        if (replyContent != null) {
            stmt.bindString(14, replyContent);
        }
        stmt.bindLong(15, entity.getMagneticFieldGain());
        stmt.bindLong(16, entity.getVoiceGain());
        stmt.bindLong(17, entity.getFilterMode());
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(18, language);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssistanceDataInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String InfoId = entity.getInfoId();
        if (InfoId != null) {
            stmt.bindString(2, InfoId);
        }
        stmt.bindLong(3, entity.getTestTime());
 
        String testName = entity.getTestName();
        if (testName != null) {
            stmt.bindString(4, testName);
        }
 
        String testPosition = entity.getTestPosition();
        if (testPosition != null) {
            stmt.bindString(5, testPosition);
        }
 
        String cableLength = entity.getCableLength();
        if (cableLength != null) {
            stmt.bindString(6, cableLength);
        }
 
        String cableType = entity.getCableType();
        if (cableType != null) {
            stmt.bindString(7, cableType);
        }
 
        String faultType = entity.getFaultType();
        if (faultType != null) {
            stmt.bindString(8, faultType);
        }
 
        String faultLength = entity.getFaultLength();
        if (faultLength != null) {
            stmt.bindString(9, faultLength);
        }
 
        String shortNote = entity.getShortNote();
        if (shortNote != null) {
            stmt.bindString(10, shortNote);
        }
 
        String dataCollection = entity.getDataCollection();
        if (dataCollection != null) {
            stmt.bindString(11, dataCollection);
        }
 
        String reportStatus = entity.getReportStatus();
        if (reportStatus != null) {
            stmt.bindString(12, reportStatus);
        }
 
        String replyStatus = entity.getReplyStatus();
        if (replyStatus != null) {
            stmt.bindString(13, replyStatus);
        }
 
        String replyContent = entity.getReplyContent();
        if (replyContent != null) {
            stmt.bindString(14, replyContent);
        }
        stmt.bindLong(15, entity.getMagneticFieldGain());
        stmt.bindLong(16, entity.getVoiceGain());
        stmt.bindLong(17, entity.getFilterMode());
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(18, language);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AssistanceDataInfo readEntity(Cursor cursor, int offset) {
        AssistanceDataInfo entity = new AssistanceDataInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // InfoId
            cursor.getLong(offset + 2), // testTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // testName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // testPosition
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cableLength
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cableType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // faultType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // faultLength
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // shortNote
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dataCollection
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // reportStatus
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // replyStatus
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // replyContent
            cursor.getInt(offset + 14), // magneticFieldGain
            cursor.getInt(offset + 15), // VoiceGain
            cursor.getInt(offset + 16), // filterMode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // language
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssistanceDataInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTestTime(cursor.getLong(offset + 2));
        entity.setTestName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTestPosition(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCableLength(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCableType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFaultType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFaultLength(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShortNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDataCollection(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReportStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReplyStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setReplyContent(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMagneticFieldGain(cursor.getInt(offset + 14));
        entity.setVoiceGain(cursor.getInt(offset + 15));
        entity.setFilterMode(cursor.getInt(offset + 16));
        entity.setLanguage(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssistanceDataInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssistanceDataInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
