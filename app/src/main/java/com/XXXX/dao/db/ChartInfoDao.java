package com.XXXX.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kehui.www.testapp.database.ChartInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHART_INFO".
*/
public class ChartInfoDao extends AbstractDao<ChartInfo, Void> {

    public static final String TABLENAME = "CHART_INFO";

    /**
     * Properties of entity ChartInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Cichang = new Property(1, float.class, "cichang", false, "CICHANG");
        public final static Property Shengyin = new Property(2, float.class, "shengyin", false, "SHENGYIN");
        public final static Property Shengyinmemory = new Property(3, float.class, "shengyinmemory", false, "SHENGYINMEMORY");
        public final static Property Line = new Property(4, float.class, "line", false, "LINE");
    };


    public ChartInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChartInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHART_INFO\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"CICHANG\" REAL NOT NULL ," + // 1: cichang
                "\"SHENGYIN\" REAL NOT NULL ," + // 2: shengyin
                "\"SHENGYINMEMORY\" REAL NOT NULL ," + // 3: shengyinmemory
                "\"LINE\" REAL NOT NULL );"); // 4: line
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHART_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChartInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindDouble(2, entity.getCichang());
        stmt.bindDouble(3, entity.getShengyin());
        stmt.bindDouble(4, entity.getShengyinmemory());
        stmt.bindDouble(5, entity.getLine());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChartInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindDouble(2, entity.getCichang());
        stmt.bindDouble(3, entity.getShengyin());
        stmt.bindDouble(4, entity.getShengyinmemory());
        stmt.bindDouble(5, entity.getLine());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChartInfo readEntity(Cursor cursor, int offset) {
        ChartInfo entity = new ChartInfo( //
            cursor.getInt(offset + 0), // id
            cursor.getFloat(offset + 1), // cichang
            cursor.getFloat(offset + 2), // shengyin
            cursor.getFloat(offset + 3), // shengyinmemory
            cursor.getFloat(offset + 4) // line
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChartInfo entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setCichang(cursor.getFloat(offset + 1));
        entity.setShengyin(cursor.getFloat(offset + 2));
        entity.setShengyinmemory(cursor.getFloat(offset + 3));
        entity.setLine(cursor.getFloat(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChartInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChartInfo entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
